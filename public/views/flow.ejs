
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="http://getbootstrap.com/favicon.ico">

    <title>Textalytics</title>

    <!-- Bootstrap core CSS -->
    <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="http://getbootstrap.com/examples/jumbotron/jumbotron.css" rel="stylesheet">
    <!-- Custom styles for blog template -->
    <link href="blog.css" rel="stylesheet">
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Textalytics </a>
        </div>
      </div>
    </div>

    <!-- Main jumbotron for a primary marketing message or call to action -->
    <div class="jumbotron">
      <div class="container">
        <h1>The Summarization Flowthrough</h1>
        <p>This concept being demonstrated here is that given a new project team with the project description, we'd like to reccommend a project supervisor based on his/her experience as being best suited to mentor this new project. This flowthrough demonstrates the entire process of techniques involved</p>
      </div>
    </div>

    <div class="container">
      <div id="phase0">
        <h2>FlowThrough Input</h2>
        <form role="form">
          <div class="form-group">
            <label for="teamName">Team Name</label>
            <input type="text" class="form-control" id="teamName" placeholder="Team Name" value="Flowthrough1">
          </div>

          <div class="form-group">
            <label for="formYear">Year</label>
              <select class="form-control" id="formYear">
                <option value="2014">2014</option>
                <option value="2015">2015</option>
                <option value="2016">2016</option>
              </select>
          </div>

          <div class="form-group">
            <label for="formSemester">Semester</label>
              <select class="form-control" id="formSemester">
                <option value="1">1</option>
                <option value="2">2</option>
              </select>
          </div>

          <div class="form-group">
            <label for="teamName">Team Members</label>
            <input type="text" class="form-control" id="teamMembers" placeholder="Team Members" value="Harry Truman; Doris Day; Johnnie Ray; Walter Winchell; Joe DiMaggio">
          </div>

          <div class="form-group">
            <label for="projectDescription">Project Description</label>
            <textarea id="projectDescription" class="form-control" placeholder="Enter project description" rows="8">Development of an application that serves as a practical solution for advancing Singapore Airlines current manpower workflow and improving their ground staff manpower management. Due to the limits of current man-management and increasing pressure on providing optimized insights, our application provides Singapore Airlines a natural platform for managing manpower distribution  and streamlines the time and number of personnel allocated, allowing Singapore Airlines to provide quicker hence more accurate statistics to ground controllers. The GroundNav application comprises of a web-based dashboard and an android mobile application:
              AirBoard (Web Application Dashboard)
              AirNav (Mobile Application)
              AirBoard allows ground controllers to view their manpower distributed on the ground as well as capture the hotzones of people movement. AirNav facilitates personnel movement in moving from task to task.</textarea>
          </div>
          <div class="form-group">
            <label for="sponsorDescription">Sponsors Description</label>
            <textarea class="form-control" id="sponsorDescription" placeholder="Enter sponsor description" rows="3">Dr. James Dean, Mr. Chou En-Lai, Singapore Airlines</textarea>
          </div>
          <button type="button" onclick="flowthrough()" class="btn btn-default">Submit</button>
        </form>
      </div>
      <div class="blog-main">
        <div id="phase1">

          <div class="blog-post">
            <h2 class="blog-post-title">Phase 1: Keyphrase Extraction</h2>
            <p class="blog-post-meta" id="phase1tracking">January 1, 2014 by Lucene/OpenNLP (Java Platform)</p>
            <div id="keyphraseDes">

            </div>
          </div><!-- /.blog-post -->

        </div>

        <div id="phase2">

          <div class="blog-post">
            <h2 class="blog-post-title">Phase 2: Sponsor Classification</h2>
            <p class="blog-post-meta" id="phase2tracking">January 1, 2014 on Wit.AI (NodeJS Platform)</p>
            <div id="witDes">

            </div>
          </div><!-- /.blog-post -->

        </div>

        <div id="phase3">

          <div class="blog-post">
            <h2 class="blog-post-title">Phase 3: Industry Classification</h2>
            <p class="blog-post-meta" id="phase3tracking"></p>
            <div id="linkedInDes">

            </div>
          </div><!-- /.blog-post -->

        </div>
      </div>
    </div>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="http://code.jquery.com/jquery-2.1.0.min.js"></script>

    <script>
      var XHR = function(connType,address,callback){
        var xhr;
        if(window.XMLHttpRequest){
          xhr = new XMLHttpRequest();
        }else{
          xhr = new ActiveXObject('Microsoft.XMLHTTP');
        }
        xhr.open(connType, address, true);
        xhr.onreadystatechange = function() {
          if(xhr.readyState == 4 && xhr.status==200){
            callback(xhr.responseText);
          }
        };

        xhr.send();
      }

      var flowthrough = function(){
        var teamName = $('#teamName')[0].value.trim(),//tn
        projectDescription = $('#projectDescription')[0].value.trim(),//pd
        sponsorDescription = $('#sponsorDescription')[0].value.trim(),//sd
        teamMembers = $('#teamMembers')[0].value.trim(),
        semester = $('#formSemester')[0].value,
        year = $('#formYear')[0].value;
        extractKeywordsPhrases(teamName,projectDescription,sponsorDescription,teamMembers,year,semester);
      }

      var extractKeywordsPhrases = function(teamName,projectDescription,sponsorDescription,teamMembers,year,semester){
        var startTimePhase1 = new Date().getMilliseconds();
        var url = 'http://localhost:8080/Textalytics470/api/keyphrase';

        url += '?tn=' +teamName + '&pd=' + projectDescription + '&sd=' + sponsorDescription + '&tm=' + teamMembers + '&y=' + year + '&s=' + semester;
        XHR('GET',url,function(results){
          console.log(results);
          var jsonResults = JSON.parse(results);
          var name = jsonResults.name,
          keywordsArray = jsonResults.keywords,
          keyphrasesArray = jsonResults.keyphrases;

          var endTimePhase1 = new Date().getMilliseconds();
          
          updateDisplayPhase1(startTimePhase1,endTimePhase1,projectDescription,keywordsArray,keyphrasesArray);

          var startTimePhase2 = new Date().getMilliseconds();
          phase2URL = '/api/wit?name='+ teamName + '&id=' + jsonResults.ID + '&sponsor=' + sponsorDescription;
          var teamID = jsonResults.ID;
          XHR('GET',phase2URL,function(phase2results){

            var jsonResults = JSON.parse(phase2results),
            endTimePhase2 = new Date().getMilliseconds(),
            timeDifference = (endTimePhase2 - startTimePhase2)/1000;
            document.getElementById('phase2tracking').innerHTML = 'Process completed in ' + timeDifference + ' seconds on Wit.AI (NodeJS Platform) with a confidence of ' + jsonResults.confidence;
            updateDisplayPhase2(jsonResults);

            var startTimePhase3 = new Date().getMilliseconds();
            if (jsonResults.organizations.length > 0) {
              phase3URL = '/api/linkedin?company=' + jsonResults.organizations[0] + '&id=' + teamID;
              XHR('GET',phase3URL,function(phase3Results){
                var phase3JSON = JSON.parse(phase3Results);
                var liWorking = phase3JSON.liWorked,
                linkedInResults = phase3JSON.linkedin,
                dbResults = phase3JSON.db;

                if (liWorking){
                  updateDisplayPhase3('linkedin',startTimePhase3,jsonResults.organizations[0],linkedInResults);
                }
              });
            }else{
              if (jsonResults.startup){
                updateDisplayPhase3('startup');
              }else{
                updateDisplayPhase3('noresults');
              }
            }
            

          });
        });
      }

      var updateDisplayPhase3 = function(caseType,startTime,company,linkedInResults){
        var linkedInDisplay = function(company,lir){
          var endTimePhase3 = new Date().getMilliseconds(),
          timeDifference = (endTimePhase3-startTime)/1000;
          document.getElementById('phase3tracking').innerHTML = 'Process completed in ' + timeDifference + ' seconds on LinkedIn Search (NodeJS Platform)';

          var linkedInDescription = document.getElementById('linkedInDes');

          var originalTitle = document.createElement('h3');
          originalTitle.innerHTML = 'Original Content';
          linkedInDescription.appendChild(originalTitle);

          var originalContent = document.createElement('p');
          originalContent.innerHTML = company;
          linkedInDescription.appendChild(originalContent);
          linkedInDescription.appendChild(document.createElement('br'));

          var descriptionPara = document.createElement('p');
          descriptionPara.innerHTML = 'Classification by industry is done via meta-search through linkedin. Future work could include abstracting the classification up the higher levels. Too many industry groups might not be the best idea';
          linkedInDescription.appendChild(descriptionPara);
          linkedInDescription.appendChild(document.createElement('br'));

          var table = document.createElement('table');
          table.className = 'table';
          linkedInDescription.appendChild(table);

          var thead = document.createElement('thead'),
          headRow = document.createElement('tr');
          table.appendChild(thead);
          thead.appendChild(headRow);
          headRow.appendChild(generateTh('Component'));
          headRow.appendChild(generateTh('Results'));

          var tbody = document.createElement('tbody');
          table.appendChild(tbody);

          var resultsArr = Object.keys(lir);
          for (var i in resultsArr){
            var key = resultsArr[i];
            tbody.appendChild(generateP3TableRow(key,lir[key]));
          }
        }

        switch(caseType){
          case 'startup':
            document.getElementById('phase3tracking').innerHTML = 'Classified as a startup project, hence LinkedIn industry classification is not applied';
            break;
          case 'noresults':
            document.getElementById('phase3tracking').innerHTML = 'No organizations identified, unable to classify this project description';
            break;
          default:
            linkedInDisplay(company,linkedInResults);
        }
        $('#phase3').show();
      }

      var updateDisplayPhase2 = function(results){
        var witDes = document.getElementById('witDes');

        var originalTitle = document.createElement('h3');
        originalTitle.innerHTML = 'Original Content';
        witDes.appendChild(originalTitle);

        var originalContent = document.createElement('p');
        originalContent.innerHTML = results.raw;
        witDes.appendChild(originalContent);
        witDes.appendChild(document.createElement('br'));

        var descriptionPara = document.createElement('p');
        descriptionPara.innerHTML = 'The classification process is based on a decision tree based on a trained dataset tuned to the IS480 wiki dataset. The database backing the decision tree is continuously updated validated inputs that now become part of the trained dataset.';
        witDes.appendChild(descriptionPara);
        witDes.appendChild(document.createElement('br'));

        var table = document.createElement('table');
        table.className = 'table';
        witDes.appendChild(table);

        var thead = document.createElement('thead'),
        headRow = document.createElement('tr');
        table.appendChild(thead);
        thead.appendChild(headRow);
        headRow.appendChild(generateTh('Component'));
        headRow.appendChild(generateTh('Results'));

        var tbody = document.createElement('tbody');
        table.appendChild(tbody);

        var confidence = results.confidence,
        organizations = results.organizations,
        acronyms = results.acronyms,
        departments = results.departments,
        persons = results.persons,
        locations = results.locations,
        emails = results.emails,
        isStartup = results.startup,
        array = [{name:'Person(s)',arr:persons},{name:'Organization(s)',arr:organizations},{name:'Department(s)',arr:departments},{name:'Acronym(s)',arr:acronyms},{name:'Location(s)',arr:locations},{name:'Email(s)',arr:emails}];

        var rowStartup = document.createElement('tr'),
        desRS = document.createElement('td'),
        valueRS = document.createElement('td');
        desRS.innerHTML = 'Is sponsor a Startup?';
        valueRS.innerHTML = isStartup;
        rowStartup.appendChild(desRS);
        rowStartup.appendChild(valueRS);
        tbody.appendChild(rowStartup);
        for (var i in array){
          var subName = array[i].name,
          subArray = array[i].arr;
          if (subArray.length > 0) {
            tbody.appendChild(generateP2TableRow(subName,subArray));
          }
        }

        $('#phase2').show();
      }

      var updateDisplayPhase1 = function(startTime,endTime,projectDescription,keywordsArray,keyphrasesArray){
        var timeDifference = (endTime - startTime)/1000;
        var phase1tracking = document.getElementById('phase1tracking');
        phase1tracking.innerHTML = 'Process completed in ' + timeDifference + ' seconds on Lucene/OpenNLP (Java Platform)';

        var phase1Des = document.getElementById('keyphraseDes');
        console.log(phase1Des);

        var originalTitle = document.createElement('h3');
        originalTitle.innerHTML = 'Original Content';
        phase1Des.appendChild(originalTitle);

        var originalContent = document.createElement('p');
        originalContent.innerHTML = projectDescription;
        phase1Des.appendChild(originalContent);

        var keywordsTitle = document.createElement('h3');
        keywordsTitle.innerHTML = 'Keywords';
        phase1Des.appendChild(document.createElement('br'));
        phase1Des.appendChild(document.createElement('br'));
        phase1Des.appendChild(keywordsTitle);

        var keywordsDes = document.createElement('p');
        keywordsDes.innerHTML='Keywords are acquired after the following pre-processing techniques';
        phase1Des.appendChild(keywordsDes);

        var uList = document.createElement('ul');
        uList.appendChild(generateLi('Tokenization'));
        uList.appendChild(generateLi('POS-Tagging'));
        uList.appendChild(generateLi('Stemming (Porter\'s Stemmer)'));
        uList.appendChild(generateLi('Term Frequency'));
        phase1Des.appendChild(uList);
        phase1Des.appendChild(document.createElement('br'));
        phase1Des.appendChild(document.createElement('br'));

        var keywordsTable = document.createElement('table');
        keywordsTable.className = 'table';

        var tableHeader = document.createElement('thead');
        var trHead = document.createElement('tr');
        trHead.appendChild(generateTh('Stem'));
        trHead.appendChild(generateTh('Frequency'));
        trHead.appendChild(generateTh('Term Frequency'));
        tableHeader.appendChild(trHead);
        keywordsTable.appendChild(tableHeader);

        var tbody = document.createElement('tbody');
        for(var i in keywordsArray){
          var keywordObj = keywordsArray[i];
          tbody.appendChild(generateTableRow(keywordObj));
        }
        keywordsTable.appendChild(tbody);
        phase1Des.appendChild(keywordsTable);
        phase1Des.appendChild(document.createElement('br'));
        phase1Des.appendChild(document.createElement('br'));

        var keyphrasesTitle = document.createElement('h3');
        keyphrasesTitle.innerHTML = 'Keyphrases';
        phase1Des.appendChild(keyphrasesTitle);

        var keyphrasesDes = document.createElement('p');
        keyphrasesDes.innerHTML='Keyphrases are acquired by cross-referencing frequency analyses results with POS-Tagged groups. The keyphrases identified are from the above input are listed as follows:';
        phase1Des.appendChild(keyphrasesDes);
        phase1Des.appendChild(document.createElement('br'));

        var uListKeyphrases = document.createElement('ul');
        for (var i in keyphrasesArray){
          var keyp = keyphrasesArray[i];
          uListKeyphrases.appendChild(generateLi(keyp));
        }
        phase1Des.appendChild(uListKeyphrases);

        $('#phase0').hide();
        $('#phase1').show();
      }

      var generateP3TableRow = function(name,value){
        var row = document.createElement('tr');
        var td1 = document.createElement('td');
        td1.innerHTML = name;
        var td2 = document.createElement('td');
        td2.innerHTML = value;

        row.appendChild(td1);
        row.appendChild(td2);
        return row;
      }

      var generateP2TableRow = function(name,valuesArr){
        var row = document.createElement('tr');
        var td1 = document.createElement('td');
        td1.innerHTML = name;
        var td2 = document.createElement('td');
        td2.innerHTML = valuesArr.join();

        row.appendChild(td1);
        row.appendChild(td2);
        return row;
      }

      var generateTableRow = function(object){
        var row = document.createElement('tr');
        var td1 = document.createElement('td');
        td1.innerHTML = object.stem;
        var td2 = document.createElement('td');
        td2.innerHTML = object.frequency;
        var td3 = document.createElement('td');
        td3.innerHTML = object.tf;
        row.appendChild(td1);
        row.appendChild(td2);
        row.appendChild(td3);
        return row;
      }

      var generateTh = function(content){
        var th = document.createElement('th');
        th.innerHTML = content;
        return th;
      }

      var generateLi = function(content){
        var li = document.createElement('li');
        li.innerHTML = content;
        return li;
      }

      var textalyticsKeyphrase = function(){
        XHR('GET','http://textalytics.herokuapp.com/api/keyphrase',function(results){
          alert(results);
        })
      }

      $(document).ready(function() {
        //textalyticsKeyphrase();
        $('#phase1').hide();
        $('#phase2').hide();
        $('#phase3').hide();
      } );
    </script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="http://getbootstrap.com/dist/js/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="http://getbootstrap.com/assets/js/ie10-viewport-bug-workaround.js"></script>
  </body>
</html>
