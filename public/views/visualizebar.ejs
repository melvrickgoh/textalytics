
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="http://getbootstrap.com/favicon.ico">

    <title>Textalytics</title>

    <!-- Bootstrap core CSS -->
    <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="/simple-sidebar.css" rel="stylesheet">
    <link href="/c3.css" rel="stylesheet">

    <!--INLINE STYLE SHEET-->

  <body>

    <!-- Main jumbotron for a primary marketing message or call to action -->
    <div id="wrapper">

        <!-- Sidebar -->
        <div id="sidebar-wrapper">
          <div class='chart'>
            <h3>Year Details</h3>
            <p id="yd-des">Click on the bar chart by years to get a further breakdown</p>
            <div id='pie-chart'></div>
          </div>
        </div>
        <!-- /#sidebar-wrapper -->

        <!-- Page Content -->
        <div id="page-content-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="container">
                          <h2>Projects over the years</h2>
                          <p>These visualizations illustrate the types of projects done over the years. Hover over the large graphs to get a more detailed breakdown on the sidebar to the left.<p>
                          <div class='chart'>
                            <div id='chart'></div>
                          </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /#page-content-wrapper -->

    </div>

    <div id="modal-party">
      <div class="modal fade" id="projectsModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
              <h4 class="modal-title" id="projectsModalTitle"></h4>
            </div>
            <div class="modal-body">
                <div class="panel-group" id="accordion" id="projectsModalBody">
                  
                  
                </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              <!--button type="button" class="btn btn-primary">Save changes</button-->
            </div>
          </div>
        </div>
      </div>

      <button id="projectsModalButton" class="btn btn-primary" data-toggle="modal" data-target="#projectsModal"></button>
    </div>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="http://code.jquery.com/jquery-2.1.0.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="/c3.js"></script>

    <script>
      var captureYearProjects = function(year,dictionary){
        var industryKeys = Object.keys(dictionary);
        
      }
      var generateModal = function(team){
        var superDiv = document.createElement('div');
        superDiv.setAttribute('class','panel panel-default');

        var panelHeadingDiv = document.createElement('div');
        panelHeadingDiv.addClass('panel-heading');

        var header = document.createElement('h4');
        header.addClass('panel-title');

        var hrefCollapse = document.createElement('a');
        hrefCollapse.setAttribute('data-toggle','collapse');
        hrefCollapse.setAttribute('data-parent','#accordion');
        hrefCollapse.setAttribute('href','#'+team.teamname);
        hrefCollapse.innerHTML = team.teamname;

        header.appendChild(hrefCollapse);

        panelHeadingDiv.appendChild(header);

        superDiv.appendChild(panelHeadingDiv);

        return superDiv;
      }

      var generatePanels = function(industryName,year){
        $('#projectsModalBody').empty();
        console.log($('#projectsModalBody'));
        var panelHTML = '<div class="panel panel-default">'
          +'<div class="panel-heading">'
            +'<h4 class="panel-title">'
              +'<a data-toggle="collapse" data-parent="#accordion" href="#collapseOne">'
                +'Collapsible Group Item #1'
              +'</a>'
            +'</h4>'
          +'</div>'
          +'<div id="collapseOne" class="panel-collapse collapse in">'
            +'<div class="panel-body">'
              
            +'</div>'
          +'</div>'
        +'</div>';

        var teams = DICTIONARY[industryName][year];
        console.log(teams);
        for (var i = 0; i<teams.length; i++){
          var team = teams[i];

          var modal = generateModal(team);
          $('#projectsModalBody').append($(modal));
        }
        console.log($('#projectsModalBody'));
      }

      function data() {
        return stream_layers(3,10+Math.random()*100,.1).map(function(data, i) {
          return {
            key: 'Stream' + i,
            values: data
          };
        });
      }

      /* Inspired by Lee Byron's test data generator. */
      function stream_layers(n, m, o) {
        if (arguments.length < 3) o = 0;
        function bump(a) {
          var x = 1 / (.1 + Math.random()),
              y = 2 * Math.random() - .5,
              z = 10 / (.1 + Math.random());
          for (var i = 0; i < m; i++) {
            var w = (i / m - y) * z;
            a[i] += x * Math.exp(-w * w);
          }
        }
        return d3.range(n).map(function() {
            var a = [], i;
            for (i = 0; i < m; i++) a[i] = o + o * Math.random();
            for (i = 0; i < 5; i++) bump(a);
            return a.map(stream_index);
          });
      }

      /* Another layer generator using gamma distributions. */
      function stream_waves(n, m) {
        return d3.range(n).map(function(i) {
          return d3.range(m).map(function(j) {
              var x = 20 * j / m - i / 3;
              return 2 * x * Math.exp(-.5 * x);
            }).map(stream_index);
          });
      }

      function stream_index(d, i) {
        return {x: i, y: Math.max(0, d)};
      }

      var initializeGraph = function(dataset){
        nv.addGraph(function() {
          var chart = nv.models.multiBarChart()
                        .showControls(true);

          chart.xAxis
              .axisLabel('Number of Projects');
              //.tickFormat(d3.format(',f'));

          chart.yAxis
              .axisLabel('Year');
              //.tickFormat(d3.format(',.1f'));
          d3.select('#chart svg')
              .datum(dataset)
              .transition().duration(500)
              .call(chart);

          nv.utils.windowResize(chart.update);

          return chart;
      });
      }
      
      var stackedBarData = function(rawData){
        var dictionary = {};
        for(var i = 0; i<rawData.length; i++){
          var unit = rawData[i],
          industryResults = _extractIndustry(unit.liindustries),
          year = unit.year;
          if (industryResults){
            if (!dictionary[industryResults.industry]){
              dictionary[industryResults.industry] = {};
            }

            if (!dictionary[industryResults.industry][year]){
              dictionary[industryResults.industry][year] = [];
            }

            dictionary[industryResults.industry][year].push(unit);
          }else{
            if (unit.witstartup){
              if(!dictionary['Startup']){
                dictionary['Startup'] = {};
              }

              if(!dictionary['Startup'][unit.year]){
                dictionary['Startup'][unit.year] = [];
              }

              dictionary['Startup'][unit.year].push(unit);
            }else{
              if(!dictionary['Unclassified']){
                dictionary['Unclassified'] = {};
              }

              if(!dictionary['Unclassified'][unit.year]){
                dictionary['Unclassified'][unit.year] = [];
              }
              dictionary['Unclassified'][unit.year].push(unit);
            }
          }
        }
        return dictionary;
      }

      var INDUSTRIES_NUMBER,
      filterStackedBarDictionary = function(dictionary){
        var valuesData = [],
        industryKeys = Object.keys(dictionary);
        //INDUSTRIES_NUMBER = industryKeys.length;
        //console.log(INDUSTRIES_NUMBER);
        for(var i = 0; i<industryKeys.length; i++){
          var industryName = industryKeys[i],
          industrySet = dictionary[industryName],
          industryYearsKeys = Object.keys(industrySet),
          industryGroup = {key:industryName,values:[]};
          for (var j = 0; j<industryYearsKeys.length; j++){
            var industryYear = industryYearsKeys[j],
            industryYearSet = industrySet[industryYear];
            industryGroup.values.push({x:industryYear,y:industryYearSet.length});
          }
          valuesData.push(industryGroup);
        }
        return valuesData;
      }

      var CURRENT_YEAR = 2007,
      PIE_CHART,
      PIE_COLUMNS = [],
      PIE_CHART_PROJECTS_COUNTER = 0,
      MOUSE_COUNTER = 0,
      mouseoverX = function(individualValues){
        if (CURRENT_YEAR != individualValues.x){
          CURRENT_YEAR = individualValues.x;
          PIE_COLUMNS = [];
          MOUSE_COUNTER = 0;
          PIE_CHART_PROJECTS_COUNTER = 0;
        }

        if (individualValues.value > 0) {
          PIE_COLUMNS.push([individualValues.id,individualValues.value]);
        }
        //console.log(PIE_COLUMNS);
        PIE_CHART_PROJECTS_COUNTER+=individualValues.value;
        MOUSE_COUNTER++;
        if (MOUSE_COUNTER == INDUSTRIES_NUMBER){
          updatePieCharts(individualValues.x,PIE_CHART_PROJECTS_COUNTER);
        }
      },
      updateAndShowModal = function(group,year){
        if(!year){
          year == 2007;
        }
        $('#projectsModalTitle').html(group + ' Projects for ' + year);
        generatePanels(group,year);
        $('#projectsModalButton').click();
      },
      updatePieCharts = function(yearID,noProjects){
        $('#yd-des').empty();
        if(PIE_CHART){
          /*console.log(PIE_CHART);
          PIE_CHART.flush();*/
          $('#pie-chart').empty();
          PIE_CHART = c3.generate({
            bindto:'#pie-chart',
            size:{
              width:250,
              height:500
            },
            data:{
              columns:PIE_COLUMNS,
              type:'donut',
              onclick: function (d, i) {
                updateAndShowModal(d.id,CURRENT_YEAR);
                
                //console.log("onclick", CURRENT_YEAR, d, i);
              },
              onmouseover: function (d, i) { },//console.log("onmouseover", d, i); },
              onmouseout: function (d, i) { }//console.log("onmouseout", d, i); }
            },
            donut: {
              title: yearID + '(' + noProjects + ' projects)'
            }
          });
        }else{
          PIE_CHART = c3.generate({
            bindto:'#pie-chart',
            data:{
              columns:PIE_COLUMNS,
              type:'donut',
              onclick: function (d, i) { console.log("onclick", d, i); },
              onmouseover: function (d, i) { console.log("onmouseover", d, i); },
              onmouseout: function (d, i) { console.log("onmouseout", d, i); }
            },
            donut: {
              title: yearID
            }
          });
        }
      }

      var c3StackedBarFilter = function(dictionary){
        var c3package = {
          bindto:'#chart',
          size:{
            height:550
          },
          data: {
            x:'x',
            columns:[],
            type:'bar',
            groups:[],
            labels:true,
            onmouseover:function(e){
              mouseoverX(e);
            }
          },
          axis: {
            x:{
              label: { // ADD
                text: 'Year',
                position: 'outer-center'
              }
            },
            y:{
              lines:[{value:0}],
              label: { // ADD
                text: 'No. of Projects',
                position: 'outer-middle'
              }
            }
          },
          grid: {
            x: {
                show: true
            },
            y: {
                show: true
            }
          },
          subchart: {
              show: true
          },
          zoom: {
              enabled: true
          }
        };
        var years = captureYears(dictionary);
        c3package.data.groups = [years];

        c3package.data.columns.push(['x'].concat(years));
        var industryKeys = Object.keys(dictionary);
        //c3package.data.groups.push(industryKeys);
        for (var i = 0; i<industryKeys.length; i++){
          var industryName = industryKeys[i],
          industrySet = dictionary[industryName],
          industryData = [industryName];
          for(var j = 0; j<years.length; j++){
            var industryYear = years[j],
            industryYearSet = industrySet[industryYear];
            if (industryYearSet){
              industryData.push(industryYearSet.length);
            }else{
              industryData.push(0);
            }
          }
          c3package.data.columns.push(industryData);
        }
        //years.pop();
        //c3package.data.groups = years;
        c3.generate(c3package);
      }

      var captureYears = function(dictionary){
        var industryKeys = Object.keys(dictionary),
        minMaxes = [];
        for (var i = 0; i<industryKeys.length; i++){
          var industryName = industryKeys[i],
          industrySet = dictionary[industryName],
          industryYearsKeys = Object.keys(industrySet);
          minMaxes.push(extractMinMaxYears(industryYearsKeys));
        }
        var superMinMax = extractSuperMinMax(minMaxes);
        return calculateMinMaxYears(superMinMax.min,superMinMax.max);
      }

      var calculateMinMaxYears = function(min,max){
        min = parseInt(min);
        max = parseInt(max);
        if (min!=max){
          console.log('processing min max' + typeof(min) + typeof max);
          var arr = [];
          for (var i = min; i<max+1; i++){
            arr.push(i);
          }
          return arr;
        }else{
          return [min];
        }
      }

      var extractMinMaxYears = function(yearKeys){
        var min =9999,max= 0;
        for (var i = 0; i<yearKeys.length; i++){
          var year = yearKeys[i];
          if (year < min){
            min = year;
          }

          if (year > max){
            max = year;
          }
        }
        return {min:min,max:max};
      }

      var extractSuperMinMax = function(minMaxArrays){
        var superMin = 9999, superMax = 0;
        for (var i = 0; i<minMaxArrays.length; i++){
          var minMaxGroup = minMaxArrays[i];
          if (minMaxGroup.min < superMin){
            superMin = minMaxGroup.min;
          }

          if (minMaxGroup.max > superMax){
            superMax = minMaxGroup.max;
          }
        }
        return {min:superMin,max:superMax};
      }

      var _extractIndustry = function(rawText){
        if (rawText && rawText.length > 0){
          var arr = rawText.split('III');
          return {code:arr[0],industry:arr[1]}
        }else{
          return false;
        }
      }
      var DICTIONARY;
      var getAllTeamsData = function(){
        xhr('/allteamsdata',function(results){
          var data = JSON.parse(results);
          var filteredData = stackedBarData(data);
          DICTIONARY = filteredData;
          console.log('ALL TEAMS FILTER');
          console.log(filteredData);
          INDUSTRIES_NUMBER = Object.keys(filteredData).length;
          c3StackedBarFilter(filteredData);
        });
      }

      var xhr = function(address,callback){
        var request = new XMLHttpRequest();
      
        request.onreadystatechange = function(e) {
          if (request.readyState == 4) {
            callback(request.responseText);
            //window.location.href = '/home';//('/home');
          }
        }
        request.open('GET', address, true);
        request.send();
      }

      $(document).ready(function() {
        //load graph here
        getAllTeamsData();
      } );
    </script>

    <script src="http://getbootstrap.com/dist/js/bootstrap.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="http://getbootstrap.com/assets/js/ie10-viewport-bug-workaround.js"></script>
  </body>
</html>
